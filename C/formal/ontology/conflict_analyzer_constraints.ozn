output ((((["Enclave Assingment: "++_toString_Enclaves(nodeEnclave,false,false)++" \n"]++["CLE Assingment: "++_toString_cleEntry(hasCle,false,false)++" \n"])++[((((((("Edge: "++show(x))++" ")++_toString_Enclaves(nodeEnclave[hasSource[x]],false,false))++" ")++_toString_Enclaves(nodeEnclave[hasDest[x]],false,false))++" ")++show(nodeEnclave[hasSource[x]]==nodeEnclave[hasDest[x]]))++"\n" | x in ControlDep, ])++["resolvableConflict Assingment: "++format(resolvableConflict)++" \n"])++[((("ENTRY: "++show(x))++" ")++_toString_Enclaves(nodeEnclave[x],false,false))++"\n" | x in FunctionEntry, ])++[((("GLOBAL: "++show(x))++" ")++_toString_Enclaves(nodeEnclave[x],false,false))++"\n" | x in PDGNodeIdx where x in Global, ];
function string : _toString_Enclaves(array [$U] of opt Enclaves: x,bool: b,bool: json) = let {array [int] of opt Enclaves: xx = array1d(x)} in (("["++join(", ",[_toString_Enclaves(xx[i],b,json) | i in index_set(xx), ]))++"]");
function string : _toString_Enclaves(opt int: x,bool: b,bool: json) = if occurs(x) then if b then showDznId(_enum_to_string_0_Enclaves[deopt(x)]) elseif json then ("{\"e\":\""++_enum_to_string_0_Enclaves[deopt(x)])++"\"}" else _enum_to_string_0_Enclaves[deopt(x)] endif else if json then "null" else "<>" endif endif;
function string : _toString_cleEntry(array [$U] of opt cleEntry: x,bool: b,bool: json) = let {array [int] of opt cleEntry: xx = array1d(x)} in (("["++join(", ",[_toString_cleEntry(xx[i],b,json) | i in index_set(xx), ]))++"]");
function string : _toString_cleEntry(opt int: x,bool: b,bool: json) = if occurs(x) then if b then showDznId(_enum_to_string_0_cleEntry[deopt(x)]) elseif json then ("{\"e\":\""++_enum_to_string_0_cleEntry[deopt(x)])++"\"}" else _enum_to_string_0_cleEntry[deopt(x)] endif else if json then "null" else "<>" endif endif;
function string : format(array [$U] of opt $T: x) = show(x);
set of int: PDGNodeIdx = 1..85;
set of int: cleEntry = 1..5;
array [PDGNodeIdx] of int: hasCle;
set of int: Enclaves = 1..4;
array [PDGNodeIdx] of int: nodeEnclave;
set of int: FunctionEntry = 65..69;
set of int: Global = 1..0;
set of int: ControlDep = 1..85;
array [1..180] of int: hasDest = [65,67,66,68,1,3,2,5,15,16,17,18,6,20,21,22,24,25,26,27,28,29,30,31,32,33,34,7,19,35,23,36,37,38,8,40,41,42,43,84,44,11,45,46,12,1,47,2,48,49,50,3,51,52,4,13,53,54,55,14,9,39,56,57,58,59,60,61,5,10,1,47,2,48,49,50,3,51,52,4,13,53,54,55,14,34,33,30,18,17,15,38,37,23,35,16,17,6,26,22,27,24,25,36,28,28,29,32,31,32,33,7,36,37,8,49,47,50,48,52,51,43,55,53,45,44,46,12,47,48,3,3,51,4,54,55,59,60,61,10,18,26,27,34,38,49,50,52,1,3,2,5,41,70,71,26,27,80,81,80,81,72,73,70,71,75,76,82,83,77,78,49,50,74,79,85,85,85,85,84];
array [1..180] of int: hasSource = [1,2,3,5,6,7,8,9,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,62,62,62,63,63,63,64,64,64,64,15,16,18,19,19,20,20,21,23,26,27,28,29,30,31,32,34,35,36,38,39,39,40,40,41,41,41,42,42,42,42,45,46,1,2,49,50,3,52,53,54,56,57,58,5,17,22,24,33,37,47,48,51,6,7,8,9,43,66,66,70,71,49,50,3,3,69,69,80,81,66,66,3,3,69,69,82,83,73,78,62,63,64,65,43];
set of int: PDGEdgeIdx = 1..180;
array [PDGEdgeIdx] of bool: resolvableConflict;
array [1..5] of string: _enum_to_string_0_cleEntry = ["None","PURPLE","ORANGE","GREEN","XDLINKAGE_GET_A"];
array [1..4] of string: _enum_to_string_0_Enclaves = ["nullEnclave","E_orange","E_purple","E_green"];
