 

# ===============  general classes decelerations  =============== 

Symbol          : Thing 
Level           : Symbol 
Enclave         : Symbol 
Label           : Symbol 

# ===============  general properties  =============== 

hasStringValue  : Symbol >> str 

hasLevel        : Enclave >> Level 


# ===============  general classes restrictions  =============== 

Symbol          : Thing 

.equivalent_to	= [Symbol & hasStringValue.exactly(1, str)] 


Enclave         : Symbol 

.equivalent_to	= [Enclave & hasLevel.exactly(1, Level)] 

# ===============  pdg class decelerations  =============== 

PDG                 : Thing

# ===============  pdg nodes  =============== 

 
PDGNode                 : Thing

Inst                    : PDGNode
Inst_FunCall            : Inst
Inst_Ret                : Inst
Inst_Br                 : Inst
Inst_Other              : Inst

VarNode	                : PDGNode
VarNode_StaticGlobal	: VarNode 
VarNode_StaticModule    : VarNode 
VarNode_StaticFunction	: VarNode 
VarNode_StaticOther     : VarNode 

FunctionEntry           : PDGNode 

Param                   : PDGNode 
Param_FormalIn	        : Param 
Param_FormalOut	        : Param 
Param_ActualIn	        : Param 
Param_ActualOut	        : Param

Annotation              : PDGNode  
Annotation_Var          : Annotation
Annotation_Global       : Annotation
Annotation_Other        : Annotation 

# ===============  pdg edges  =============== 

PDGEdge	                : Thing 

ControlDep	            : PDGEdge 
ControlDep_CallInv      : ControlDep 
ControlDep_CallRet      : ControlDep 
ControlDep_Entry        : ControlDep 
ControlDep_Br           : ControlDep 
ControlDep_Other        : ControlDep
 

DataDepEdge	            : PDGEdge 
DataDepEdge_DefUse	    : DataDepEdge 
DataDepEdge_RAW	        : DataDepEdge 
DataDepEdge_Ret	        : DataDepEdge 
DataDepEdge_Alias	    : DataDepEdge 


Parameter               : PDGEdge
Parameter_In	        : Parameter 
Parameter_Out	        : Parameter 
Parameter_Field	        : Parameter 

Anno                    : PDGEdge
Anno_Global             : Anno
Anno_Var                : Anno
Anno_Other              : Anno

# ===============  pdg properties  =============== 

 
hasPDGEdges         : PDG           >> PDGEdge

hasPDGNodes         : PDG           >> PDGNode

hasSourceNode	    : PDGEdge       >> PDGNode 

hasDestinationNode	: PDGEdge       >> PDGNode 

hasFunction         : Inst       >> FunctionEntry

hasIncomingEdges	: PDGNode       >> PDGEdge 

hasOutgoingEdges	: PDGNode       >> PDGEdge 

hasControlDep	    : PDGNode       >> PDGNode 

hasDataDep	        : PDGNode       >> PDGNode 

hasDep	            : PDGNode       >> PDGNode 

hasParamIdx	        : Parameter     >> int 

hasParam            : FunctionEntry >> Param_FormalIn 

hasReturn           : FunctionEntry >> Inst_Ret

hasChildren         : FunctionEntry >> PDGNode

hasArgument         : Inst_FunCall  >> Param_ActualIn 

hasLabel            : Annotation    >> Label 
 

 


# ===============  pdg class restrictions  =============== 

PDG             : Thing 

.equivalent_to	= [PDG & hasPDGEdges.min(0, PDGEdge) & hasPDGNodes.min(1, PDGNode)] 

# ===============  pdg nodes  =============== 

FunctionEntry   : PDGNode 

.equivalent_to	= [FunctionEntry & hasReturn.min(1, Inst_Ret)] 
 

Parameter      : PDGNode 

.equivalent_to	= [Parameter & hasParamIdx.exactly(1, int)] 

 

Annotation     : PDGNode 

.equivalent_to	= [Annotation & hasLabel.exactly(1, Label)] 



AllDisjoint([Inst_FunCall, Inst_Ret, Inst_Br, Inst_Other])
AllDisjoint([VarNode_StaticGlobal, VarNode_StaticModule, VarNode_StaticFunction, VarNode_StaticOther])  
AllDisjoint([Param_FormalIn, Param_FormalOut, Param_ActualIn, Param_ActualOut])  
AllDisjoint([Annotation_Var, Annotation_Global, Annotation_Other])
AllDisjoint([Inst, VarNode, Param, Annotation])      

 

# ===============  pdg edges  =============== 

PDGEdge	: Thing 

.equivalent_to	= [PDGEdge & hasSourceNode.exactly(1, PDGNode) & hasDestinationNode.exactly(1, PDGNode)] 

 

ControlDep_CallInv  : ControlDep 

.equivalent_to	= [Inst_FunCall & hasSourceNode.exactly(1, Inst_FunCall) & hasDestinationNode.exactly(1, FunctionEntry)] 



AllDisjoint([ControlDep_CallInv, ControlDep_CallRet, ControlDep_Entry, ControlDep_Br,ControlDep_Other ])  
AllDisjoint([DataDepEdge_DefUse, DataDepEdge_RAW, DataDepEdge_Ret, DataDepEdge_Alias])
AllDisjoint([Parameter_In, Parameter_Out, Parameter_Field])  
AllDisjoint([Anno_Global, Anno_Var, Anno_Other])  
AllDisjoint([ControlDep, DataDepEdge, Parameter, Anno]) 
 

 

# ===============  cle class decelerations  =============== 

 

CLE_entry	    : Thing 
CrossDomainFlow : Thing  
GuardDirective	: Thing 
FuncTaints	    : Thing 
RetTaint        : Label 
BodyTaint       : Label 
ArgTaint        : Label 
GapsTag	        : Thing 
GuardOperation  : Symbol 
Allow           : GuardOperation 
Deny            : GuardOperation 
Redact          : GuardOperation 

 

# ===============  cle properties  =============== 

 

hasLevel        : CLE_entry         >> Level 

hasCDF          : CLE_entry         >> CrossDomainFlow  

hasRemoteLevel  : CrossDomainFlow   >> Level 

hasDirective    : CrossDomainFlow   >> GuardDirective 

hasFunctTaints  : CrossDomainFlow   >> FuncTaints	 

hasTaints	    : RetTaint          >> CLE_entry 

hasTaints	    : BodyTaint         >> CLE_entry 

hasTaints	    : ArgTaint          >> CLE_entry 

hasArgTaintIdx	: ArgTaint          >> int 

hasRetTaint     : FuncTaints        >> RetTaint 

hasBodyTaint    : FuncTaints        >> BodyTaint 

hasArgTaint     : FuncTaints        >> ArgTaint 

hasOperation	: GuardDirective    >> GuardOperation 

hasOneway	    : GuardDirective    >> bool 

hasGapsTag	    : GuardDirective    >> GapsTag 

hasOpArgs       : Redact            >> Symbol 

 

 

# ===============  cle class restrictions  =============== 

 

CLE_entry	: Thing 

.equivalent_to	= [CLE_entry & hasLevel.exactly(1, Level)] 

 

CrossDomainFlow : Thing 

.equivalent_to	= [CrossDomainFlow & hasRemoteLevel.exactly(1, Level) & hasDirective.exactly(1, GuardDirective) & (hasFunctTaints.exactly(0, FuncTaints) | hasFunctTaints.exactly(1, FuncTaints))] 

 

GuardDirective	: Thing 

.equivalent_to	= [GuardDirective & hasOperation.exactly(1, GuardOperation) & hasOneway.exactly(1, bool) & hasGapsTag.exactly(3, GapsTag)] 

 

FuncTaints	: Thing 

.equivalent_to	= [FuncTaints & hasRetTaint.exactly(1, RetTaint) & hasBodyTaint.exactly(1, BodyTaint) & hasArgTaint.min(1, ArgTaint)] 

 

ArgTaint        : Label 

.equivalent_to	= [ArgTaint & hasArgTaintIdx.exactly(1, int)] 

 

Redact          : GuardOperation 

.equivalent_to	= [Redact & hasOpArgs.min(1, Symbol)] 

 

 

# ===============  link CLE to pdg  =============== 

 

# ===============  class decelerations  =============== 

 

CLEAnnotation   : Annotation 
VarAnnotation   : CLEAnnotation 
FuncAnnotation  : CLEAnnotation 

 

# ===============  properties  =============== 

 

hasCLEJSON      : Annotation >> bool 

hasLevel        : CLEAnnotation >> Level 

hasCDF          : CLEAnnotation >> CrossDomainFlow   

 

# ===============  class restrictions  =============== 

CLEAnnotation   : Annotation 

.equivalent_to   = [ VarNode | FunctionEntry & hasCLEJSON.exactly(1, bool)  &  hasLevel.exactly(1, bool)] 

 

# constraints 

# hasEnclave	: PDGNode >>(1) Enclave
