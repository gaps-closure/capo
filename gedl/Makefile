############################################################################
# Generate GEDL for application, autogenerate cross-domain program artifacts
############################################################################

# STATUS:
# cd ~/gaps/build/apps/eridemo2020/secdesk
# source .vscode/closure_env.sh && make -f .vscode/Makefile.gedl clean
# source .vscode/closure_env.sh && make -f .vscode/Makefile.gedl gedl | tee err

# Set or override variables from environment
# Directories

EDIR := ./example/EnclaveSplit
PROG := Closure
HEURISTICS_DIR:= ./heuristics

ODIR=./build
output_folder_create := $(shell mkdir -p $(ODIR))

AUTOGENDIR := $(ODIR)/autogen
autogen_folder_create := $(shell mkdir -p $(ODIR)/autogen)

ENCLAVES=
enclaves_set := $(foreach enclave,$(sort $(dir $(wildcard $(EDIR)//*/))), $(eval ENCLAVES+=$(notdir $(enclave:%/=%))))

enclave_folders_create := $(foreach enclave,$(ENCLAVES), $(shell mkdir -p $(ODIR)/$(enclave)))

PREPROCESSOR := /home/mnorris/gaps/build/src/mules/cle-preprocessor/src/qd_cle_preprocessor.py
RPCGENERATOR := ./RPCGenerator_rk.py
IDLGENERATOR := ./IDLGenerator.py
AUTOGEN := /home/mnorris/gaps/build/src/hal/autogen/autogen.py
CLOSURE_SCHEMAS := ./schema
HAL_PATH=/home/mnorris/gaps/build/src/hal
CLOSURE_INCLUDES := $(HAL_PATH)/api
CLOSURE_LIBS := $(HAL_PATH)/api
LIBGEDL := ./libgedl.so

# Tools
LLVM9 := /opt/closure/devel/9.0.1dbg
#LLVM9 := /home/mnorris/Documents/llvm/build
CLANG=$(LLVM9)/bin/clang-9
CLANG_FLAGS=-emit-llvm -S -g -fno-builtin
OPT=$(LLVM9)/bin/opt
LLVMLINK=$(LLVM9)/bin/llvm-link
IPCMODE = Multithreaded

# Build arguments
LLVM_INCLUDE=$(LLVM9)/lib/clang/9.0.0/include
CFLAGS = -O2 -Wall -Wstrict-prototypes
LIB_OBJ= $(AUTOGENDIR)/float754.o $(AUTOGENDIR)/codec.o 
INCLUDES=-I$(LLVM_INCLUDE) -I$(CLOSURE_INCLUDES) -I../autogen 

# Different case from IPCMODE, same purpose, sigh!
IPC_MODE=Multithreaded 

# Application configuration
INURI="ipc:///tmp/${PROG}sub"
OUTURI="ipc:///tmp/${PROG}pub"

############################################################################
# Check if required variables are set
############################################################################
check_defined = \
    $(strip $(foreach 1,$1, \
        $(call __check_defined,$1,$(strip $(value 2)))))
__check_defined = \
    $(if $(value $1),, \
      $(error Undefined $1$(if $2, ($2))))

$(call check_defined, OPT,  llvm opt tool)
$(call check_defined, CLANG,  clang compiler)
$(call check_defined, LLVMLINK,  llvm linker)
$(call check_defined, PREPROCESSOR, cle preprocessor)
$(call check_defined, RPCGENERATOR, rpc generator)
$(call check_defined, IDLGENERATOR, idl generator)
$(call check_defined, AUTOGEN, codec and dfdl generator)

$(call check_defined, EDIR, input divvied directory)
$(call check_defined, ODIR, output partitioned directory)
$(call check_defined, CLOSURE_SCHEMAS, directory for closure schemas)
$(call check_defined, AUTOGENDIR, directory for autogenerated codec and dfdl)
$(call check_defined, IPCMODE, ipc mode to use for partitioning subdirectory)
$(call check_defined, LLVM_INCLUDE, llvm version specific includes)
$(call check_defined, CLOSURE_INCLUDES, closure cross-domain includes)
$(call check_defined, CLOSURE_LIBS, closure lib directory)
$(call check_defined, INCLUDES, include directories)
$(call check_defined, CLANG_FLAGS, clang options for LLVM IR generation)
$(call check_defined, CFLAGS, clang options for binary object creation)
$(call check_defined, LIB_OBJ, objects for closure cross-domain library)
$(call check_defined, PROG, name of application program)
$(call check_defined, LIBGEDL, libgedl.so opt pass library)
$(call check_defined, IPC_MODE, ipc mode for GEDL generator)
$(call check_defined, INURI, zmq inuri for hal configuration)
$(call check_defined, OUTURI, zmq outuri for hal configuration)

# These are defined on the fly, don't check
#$(call check_defined, ENCLAVELL, ??)
#$(call check_defined, ENCLAVEFL, ??)
#$(call check_defined, PREPROCIN, ??)


plugin:
	@cd $(ODIR) && cmake ..
	@make -C $(ODIR)
	@cd $(ODIR) && mv libpdg.so libgedl.so

############################################################################
# GEDL generation
############################################################################
gedl: $(ODIR)/gedl.ll
	cd $(ODIR) && $(OPT) -disable-output -load $(LIBGEDL) -accinfo-track -d 1 -prog $(PROG) -he ./heuristics < gedl.ll

gedlir: $(ODIR)/gedl.ll

$(ODIR)/gedl.ll: $(EDIR)/perencll.done
	$(foreach enclave,$(ENCLAVES), $(eval ENCLAVELL += $(EDIR)/$(enclave)/$(enclave).ll ))
	$(LLVMLINK) $(ENCLAVELL) -S -o $(ODIR)/gedl.ll

perencll: $(EDIR)/perencll.done

# create combined LL for each enclave, and do an opt pass to determine functions imported/exported by each enclave
$(EDIR)/perencll.done: $(EDIR)/compencs.done
	$(foreach enclave,$(ENCLAVES), $(LLVMLINK) $(shell find $(EDIR)/$(enclave) -name "*.ll";) -S -o $(EDIR)/$(enclave)/$(enclave).ll;)
	$(foreach enclave,$(ENCLAVES), $(OPT) -disable-output -load $(ODIR)/$(LIBGEDL) -llvm-test -prefix $(ODIR)/$(enclave)/ < $(EDIR)/$(enclave)/$(enclave).ll;)
	touch $(EDIR)/perencll.done

compencs: $(EDIR)/compencs.done

# compile to LLVM IR
$(EDIR)/compencs.done: $(EDIR)/preproc.done
	$(foreach enclave,$(ENCLAVES), $(foreach p,$(shell find $(EDIR)/$(enclave) -name *.c;), $(CLANG) $(CLANG_FLAGS) $(INCLUDES) -I $(EDIR)/$(enclave)/facilio/include $p -o $(basename $p).ll;))
	touch $(EDIR)/compencs.done

preproc: $(EDIR)/preproc.done

# preprocess each C and H file, rename them back
$(EDIR)/preproc.done: $(EDIR)/cleancopy.done
	$(foreach enclave,$(ENCLAVES), $(eval PREPROCC += $(shell find $(EDIR)/$(enclave) -name *.c;)))
	$(foreach enclave,$(ENCLAVES), $(eval PREPROCH += $(shell find $(EDIR)/$(enclave) -name *.h;)))
	$(foreach p,$(PREPROCC), python3 $(PREPROCESSOR) -s ${CLOSURE_SCHEMAS}/cle-schema.json -f $p;)
	$(foreach p,$(PREPROCH), python3 $(PREPROCESSOR) -s ${CLOSURE_SCHEMAS}/cle-schema.json -f $p;)
	$(foreach p,$(PREPROCC), mv $(basename $p).mod.c $p;)
	$(foreach p,$(PREPROCH), mv $(basename $p).mod.h $p;)
	touch $(EDIR)/preproc.done

cleancopy: $(EDIR)/cleancopy.done

$(EDIR)/cleancopy.done:
	touch $(EDIR)/cleancopy.done

############################################################################
# Autogeneration post GEDL generation
############################################################################
rpc: autogen slibs libs
	$(foreach enclave,$(ENCLAVES), $(eval ENCLAVEFL += $(EDIR)/$(enclave)/*.mod.c ))
	python3 $(RPCGENERATOR) -o $(ODIR) -g $(ODIR)/$(PROG).gedl -i $(IPC_MODE) -a $(CLOSURE_LIBS) -n $(INURI) -t $(OUTURI) -e $(EDIR) -E $(ENCLAVES)  -x xdconf.ini -m purple

autogen: 
	cd $(AUTOGENDIR) && python3 $(AUTOGEN) -i "$(PROG).idl" -g bw_v1 -d $(PROG)_bw.dfdl -e codec
	cd $(AUTOGENDIR) && python3 $(AUTOGEN) -i "$(PROG).idl" -g be_v1 -d $(PROG)_be.dfdl -e codec

idl: 
	python3 $(IDLGENERATOR) -s $(CLOSURE_SCHEMAS)/gedl-schema.json -g "$(ODIR)/$(PROG).gedl" -o "$(ODIR)/autogen/$(PROG).idl" -i $(IPC_MODE)
	
slibs: $(AUTOGENDIR)/libcodecs.so 

libs: $(AUTOGENDIR)/libcodecs.a 

$(AUTOGENDIR)/libcodecs.a: $(LIB_OBJ)
	ar rcs $@ $^

$(AUTOGENDIR)/libcodecs.so: $(LIB_OBJ)
	$(CLANG) $(CFLAGS) -fPIC -shared -o $@ $<

$(AUTOGENDIR)/%.o: $(AUTOGENDIR)/%.c
	$(CLANG) $(CFLAGS) -fPIC -c $< -o $@

############################################################################
# Housekeeping
############################################################################
clean: 
	@rm -rf $(EDIR)/*/*.ll $(EDIR)/compencs.done $(EDIR)/perencll.done $(ODIR)/gedl.ll
	

